name: Pipeline for stage cluster

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GCP credentials
        run: |
          mkdir -p /home/runner/gcp_credentials
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_STAGE }}" | base64 -d > /home/runner/gcp_credentials/credentials.json
          chmod 600 /home/runner/gcp_credentials/credentials.json

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=estado-state" \
            -backend-config="prefix=terraform/state" \
            -backend-config="credentials=/home/runner/gcp_credentials/credentials.json"

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGE }}

      - name: Configure GKE access
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 416.0.0'
          install_components: 'kubectl,gke-gcloud-auth-plugin'
          project_id: ${{ secrets.GCP_PROJECT_ID_STAGE }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: stage
          location: us-central1
          project_id: ${{ secrets.GCP_PROJECT_ID_STAGE }}

      
      - name: Terraform destroy
        run: |
          cd terraform
          terraform destroy -auto-approve \
                -var "project_id=${{ secrets.GCP_PROJECT_ID_STAGE }}" \
                -var "region=us-central1" \
                -var "zone=us-central1-a" \
                -var "credentials_file_path=/home/runner/gcp_credentials/credentials.json" \
                -var "machine_type=e2-medium" \
                -var "image=ubuntu-os-cloud/ubuntu-2204-lts" \
                -var "cluster_size=1" \
                -var "cluster_name=stage" 

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=planfile \
                -var "project_id=${{ secrets.GCP_PROJECT_ID_STAGE }}" \
                -var "region=us-central1" \
                -var "zone=us-central1-a" \
                -var "credentials_file_path=/home/runner/gcp_credentials/credentials.json" \
                -var "machine_type=e2-medium" \
                -var "image=ubuntu-os-cloud/ubuntu-2204-lts" \
                -var "cluster_size=1" \
                -var "cluster_name=stage" 

      - name: Terraform Apply and export VM IP
        run: |
          cd terraform
          terraform apply -auto-approve planfile
          ENDPOINT=$(terraform output -raw cluster_endpoint)
          echo "CLUSTER_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          echo "Endpoint do cluster: $ENDPOINT"

      - name: Configurar acesso kubectl
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials stage \
            --region us-central1 \
            --project ${{ secrets.GCP_PROJECT_ID_STAGE }}
      
      - name: Instalar Ansible e dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip git
          pip install ansible kubernetes openshift
      
      - name: Imprimir conteudo do playbook.yml para depuracao
        run: cat ansible/playbook.yml
      
      - name: Executar Ansible playbook
        run: ansible-playbook ansible/playbook.yml
        env:
          K8S_AUTH_KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Mostrar serviços monitoring
        run: |
          kubectl get svc -n monitoring
